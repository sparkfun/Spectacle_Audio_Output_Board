
	.sect code,putstrp	// 32 words
	.export _putstrp
_putstrp:	// PROLOGUE
	ldx (I6)+1,NULL	// Room for Sp and Fp
	stx MR0,(I6)+1 ; sty I7,(I6)
	stx LR0,(I6)+1 ; sty I5,(I6)	// return address
	stx I6,(I6) ; sty I4,(I6)
	ldx (I6)+1,I4	// FP' = SP, reserve space
	ldc 512,MR0
	stx A0,(I6)+1 ; sty A1,(I6)
	stx C0,(I6)
	// register parameter to function: I0

// typedef unsigned int size_t;
// typedef signed int ptrdiff_t;
// typedef short wchar_t;
// typedef struct __sfpos {
//     short _pos[4];
// } fpos_t;
// typedef void FILE;
// __near FILE register __a0 *fopen(__near const char register __i0 *filename,
// 				 __near const char register __i1 *mode);
// __near FILE register __a0 *freopen(__near const char register __i0 *filename,
// 				   __near const char register __i1 *mode,
// 				   __near FILE register __a0 *stream);
// int register __a0 fflush(__near FILE register __a0 *stream);
// int register __a0 fclose(__near FILE register __a0 *stream);
// int register __a0 remove(__near const char register __i0 *filename);
// int register __a0 rename(__near const char register __i0 *oldname,
// 			 __near const char register __i1 *newname);
// int register __a0 fgetc(__near FILE register __a1 *stream);
// __near char register __a0 *fgets(__near char register __i0 *s,
// 				 int register __a0 n,
// 				 __near FILE register __a1 *stream);
// int register __a0 fputc(int register __a0 c,
// 			__near FILE register __a1 *stream);
// int register __a0 fputs(__near const char register __i0 *s,
// 			__near FILE register __a1 *stream);
// int register __a0 getc(__near FILE register __a1 *stream);
// int register __a0 getchar(void);
// __near char register __a0 *gets(__near char register __i0 *s);
// int register __a0 putc(int register __a0 c, __near FILE register __a1 *stream);
// int register __a0 putchar(int register __a0 c);
// int register __a0 puts(__near const char register __i0 *s);
// int register __a0 ungetc(int register __a0 c,
// 			 __near FILE register __a1 *stream);
// size_t register __a0 fread(__near void register __i0 *ptr,
// 			   size_t register __b0 size,
// 			   size_t register __b1 nobj,
// 			   __near FILE register __a1 *stream);
// size_t register __a0 fwrite(__near const void register __i0 *ptr,
// 			    size_t register __b0 size,
// 			    size_t register __b1 nobj,
// 			    __near FILE register __a1 *stream);
// int register __a0 fseek(__near FILE register __a0 *stream,
// 			long register __b offset,
// 			int register __a1 origin);
// long register __a ftell(__near FILE register __a0 *stream);
// void rewind(__near FILE register __a0 *stream);
// int register __a0 fgetpos(__near FILE register __a0 *stream,
// 			  __near fpos_t register __i0 *ptr);
// int register __a0 fsetpos(__near FILE register __a0 *stream,
// 			  __near const fpos_t register __i0 *ptr);
// void clearerr(__near FILE register __a0 *stream);
// int register __a0 feof(__near FILE register __a0 *stream);
// int register __a0 ferror(__near FILE register __a0 *stream);
// void perror(__near const char register __i0 *s);
// int fprintf(__near FILE *stream, __near const char *fmt, ...);
// int printf(__near const char *fmt, ...);
// int sprintf(__near char *s, __near const char *fmt, ...);
// int sscanf(const char *str, const char *fmt, ...);
// int tinysprintf(char *str, const char *fmt, ...);
// int tinyprintf(const char *fmt, ...);
// int tinyfprintf(FILE *fp, const char *fmt, ...);
// typedef short s_int16;
// typedef unsigned short u_int16;
// typedef long s_int32;
// typedef unsigned long u_int32;
// typedef __fract short f_int16;
// typedef __fract long f_int32;
// typedef unsigned int entry_u_int16;
// void SpiBoot(register __a0 short clkConf, register __i2 short addr,
// 	     register __i0 short m24);
// void SpiLoad(register __i2 short startAddr, register __i0 short m24);
// void SpiDelay(register __a0 u_int16 wait);
// auto u_int16 SpiSendReceive(register __a0 u_int16 data);
// void Restart(void);
// void IdleHook(void);
// auto u_int16 InitFileSystem(void);
// auto s_int16 OpenFile(register __c0 u_int16 fileNum);
// auto s_int16 ReadFile(register __i3 u_int16 *buf,
// 		      register __c1 s_int16 byteOff,
// 		      register __c0 s_int16 byteSize
//  );
// u_int32 Seek(register __a u_int32 pos);
// u_int32 Tell(void);
// auto u_int16 ReadDiskSector(register __i0 u_int16 *buffer,
// 			    register __a u_int32 sector);
// auto u_int16 MapperReadDiskSector(register __i0 u_int16 *buffer,
// 				  register __a u_int32 sector);
// void Disable(void);
// void Enable(void);
// void Sleep(void);
// void NullHook(void);
// void *SetHookFunction(register __i0 u_int16 hook, register __a0 void *newFunc);
// register __b0 u_int16 BootFromX(register __i0 u_int16 *start);
// void SinTest(void);
// void MemTests(register short __b0 muxTestResult);
// enum voltIdx {
//     voltCorePlayer = 0,
//     voltIoPlayer,
//     voltAnaPlayer,
//     voltCoreUSB,
//     voltIoUSB,
//     voltAnaUSB,
//     voltCoreSuspend,
//     voltIoSuspend,
//     voltAnaSuspend,
//     voltCoreUser,
//     voltIoUser,
//     voltAnaUser,
//     voltEnd
// };
// extern u_int16 voltages[voltEnd];
// void BusyWait10(void);
// void BusyWait1(void);
// void PowerSetVoltages(u_int16 volt[3]);
// void PowerOff(void);
// void RealPowerOff(void);
// u_int16 PlayCurrentFile(void);
// u_int16 RealPlayCurrentFile(void);
// void LoadCheck(struct CodecServices *cs, s_int16 n);
// void RealLoadCheck(struct CodecServices *cs, s_int16 n);
// u_int16 UnsupportedFile(struct CodecServices *cs);
// u_int16 DefUnsupportedFile(struct CodecServices *cs);
// extern u_int16 g_dctlo[2048];
// extern __y u_int16 g_dcthi[2048];
// extern s_int16 g_others[2048];
// extern s_int16 g_yprev0[1024];
// extern s_int16 g_yprev1[1024];
// struct FsMapper *FsMapRamCreate(struct FsPhysical *physical,
// 				u_int16 cacheSize);
// void putch(register __a0 s_int16 ch);
// s_int16 getch(void);
// void putword(register __a0 s_int16 ch);
// s_int16 getword(void);
// void putstrp(register __i0 u_int16 *packedStr) {
//     while (1)

L1:
//  {
// 	register int i = *packedStr++;

	// C0
	// allocated C0 as i
	ldc 65528,A1
	ldx (I0)+1,C0

// 	if (i >> 8)

	// expression in C0
	ashl C0,A1,A0
	nop
	jzs LE1
	nop
// jumped away
//  {
// 	    putch(i >> 8);

	// Register parameter: A0, pass by value
	// expression already in A0
	.import _putch
	call _putch
	nop
// jumped away

// 	} else {
// 	    break;


// 	}
// 	if (i & 255)

	ldc 255,A0
	and C0,A0,A0
	nop
	jzs LE1
	add C0,NULL,A0
// jumped away
//  {
// 	    putch(i);

	// Register parameter: A0, pass by value
	// expression in C0
	call _putch
	ldc L1,LR0
// jumped away

// 	} else {
// 	    break;

	// freed register variable C0
	j L1
	nop
// jumped away
LE1:
	// EPILOGUE
	ldx (I6)-1,C0
	ldx (I6)-1,A0 ; ldy (I6),A1
	ldx (I4),I6 ; ldy (I4),I4	// Read Sp and Fp
	ldx (I6)-1,NULL
	ldx (I6)-1,LR0 ; ldy (I6),I5
	jr
	ldx (I6)-1,MR0 ; ldy (I6),I7
// jumped away
	// FUNCTION putstrp(): stack usage ~ 2 x (6 + 0) = 2 x 6 words


	.end
